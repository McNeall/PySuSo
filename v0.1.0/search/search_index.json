{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"boards/","title":"Boards","text":"<p>Implementations of a Sudoku board and related objects.</p>"},{"location":"boards/#pysuso.boards.Coordinate","title":"Coordinate  <code>dataclass</code>","text":"<p>Represents a coordinate on a board.</p> <p>Upon creation a <code>Coordinate</code> validates the passed indices. After the validation passes and the <code>Coordinate</code> is created the indices cannot be changed.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>int</code> <p>Row index of the coordinate. Needs to be between 0 and 8, both included.</p> required <code>col</code> <code>int</code> <p>Col index of the coordinate. Needs to be between 0 and 8, both included.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If row or column index are invalid. Indizes are invalid in case they are not between zero and 8, both included.</p>"},{"location":"boards/#pysuso.boards.CallType","title":"CallType","text":"<p>             Bases: <code>Enum</code></p> <p>Allowed call types of the Board constructor.</p> <p>The <code>__init__</code> method of a <code>Board</code> should only be called by the provided factory methods. The enum is used to describe the  call types.</p>"},{"location":"boards/#pysuso.boards.Board","title":"Board","text":"<pre><code>Board(\n    values: list[int],\n    _call_type: CallType = CallType.NON_PRIVATE,\n)\n</code></pre> <p>Models a possibly unfinished Sudoku board.</p> <p>The constructure initializes the class but assumes a valid input. Do not directly instantiate this class. Use one of the factory methods:</p> <ul> <li>from_nested_lists</li> <li>from_string</li> <li>from_list</li> </ul> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>list[int]</code> <p>Values to initialize the Board. Values are not checked.</p> required <code>_call_type</code> <code>CallType</code> <p>Indicates if the constructor was called from outside the class. Defaults to <code>CallType.NON_PRIVATE</code>, which indicates it was called called directly.</p> <code>NON_PRIVATE</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If constructor is called directly, that is not using one of the listed factory methods</p>"},{"location":"boards/#pysuso.boards.Board.from_nested_lists","title":"from_nested_lists  <code>classmethod</code>","text":"<pre><code>from_nested_lists(values: list[list[int]]) -&gt; Board\n</code></pre> <p>Return a new Board based on the passed values.</p> <p>The passed argument needs to have exactly nine elements. Each of them has to be a list with nine integers between zero and nine, both included. A value of zero marks an empty field.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>list[list[int]]</code> <p>The values used to create the board</p> required <p>Returns:</p> Type Description <code>Board</code> <p>Board holding the values given by <code>values</code>.</p> <p>Raises:</p> Type Description <code>InvalidBoardError</code> <p>Raised in the following cases:</p> <ul> <li>If the outter list has less than nine inner lists.</li> <li>If an inner list has less than nine elements.</li> <li>If the values are not between zero and nine.</li> </ul>"},{"location":"boards/#pysuso.boards.Board.from_list","title":"from_list  <code>classmethod</code>","text":"<pre><code>from_list(values: list[int]) -&gt; Board\n</code></pre> <p>Return a new Board based on the passed values.</p> <p>The passed argument needs to have exactly 81 integers between 0 and 9, both included. A value of zero marks an empty field.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>list[int]</code> <p>The values used to create the board.</p> required <p>Returns:</p> Type Description <code>Board</code> <p>Board holding the values given by <code>values</code>.</p> <p>Raises:</p> Type Description <code>InvalidBoardError</code> <p>Raised in the following cases:</p> <ul> <li>If <code>values</code> does not have exactly 81 elements</li> <li>If elements of <code>values</code> are not between 0 and 9, both included.</li> </ul>"},{"location":"boards/#pysuso.boards.Board.from_string","title":"from_string  <code>classmethod</code>","text":"<pre><code>from_string(values: str) -&gt; Board\n</code></pre> <p>Return a new Board based on the passed values.</p> <p>The passed string needs to have exactly 81 characters. Each character being an integer.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>str</code> <p>The values used to create the board</p> required <p>Returns:</p> Type Description <code>Board</code> <p>Board holding the values given by <code>values</code> after converting to integer</p> <p>Raises:</p> Type Description <code>InvalidBoardError</code> <p>Raised in the following cases:</p> <ul> <li>If the passed string does not have exactly 81 characters</li> <li>If there is a character that is not convertible to an integer</li> <li>If the converted characters are not integers between zero and nine</li> </ul>"},{"location":"boards/#pysuso.boards.Board.available_col_values","title":"available_col_values","text":"<pre><code>available_col_values(column_index: int) -&gt; frozenset[int]\n</code></pre> <p>Return the allowed but unused values for the column given by <code>column_index</code>.</p> <p>Parameters:</p> Name Type Description Default <code>column_index</code> <code>int</code> <p>The column index specifying the column for which the values should be retrieved. The index is zero based, hence the allowed values are between zero and eight, both included.</p> required <p>Returns:</p> Type Description <code>frozenset[int]</code> <p>Values available for the column indentified by the passed column_index</p> <p>Raises:</p> Type Description <code>InvalidIndexError</code> <p>If <code>column_index</code> is less than zero or greater than eight.</p>"},{"location":"boards/#pysuso.boards.Board.available_row_values","title":"available_row_values","text":"<pre><code>available_row_values(row_index: int) -&gt; frozenset[int]\n</code></pre> <p>Return the allowed but unused values for the row given by <code>row_index</code>.</p> <p>Parameters:</p> Name Type Description Default <code>row_index</code> <code>int</code> <p>The row index specifying the row for which the values should be retrieved. The index is zero based, hence the allowed values are between zero and eight, both included.</p> required <p>Returns:</p> Type Description <code>frozenset[int]</code> <p>Values available for the row indentified by the passed row_index</p> <p>Raises:</p> Type Description <code>InvalidIndexError</code> <p>If <code>row_index</code> is less than zero or greater or equal eight.</p>"},{"location":"boards/#pysuso.boards.Board.available_square_values","title":"available_square_values","text":"<pre><code>available_square_values(\n    coordinate: Coordinate,\n) -&gt; frozenset[int]\n</code></pre> <p>Return the allowed but unused values of the 3x3 square that contains <code>coordinate</code>.</p> <p>The board is separated in in 3x3 squares starting from <code>Coordinate(0, 0)</code>. Every three rows and columns a new square starts.</p> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>Coordinate</code> <p>Coordinate used to determine the square for which the values should be returned.</p> required <p>Returns:</p> Type Description <code>frozenset[int]</code> <p>Values available for the 3x3 square the given coordinate is located in.</p>"},{"location":"boards/#pysuso.boards.Board.is_valid","title":"is_valid","text":"<pre><code>is_valid(coordinate: Coordinate, value: int) -&gt; bool\n</code></pre> <p>Check that <code>value</code> is valid for <code>coordinate</code> based on the current state of the board.</p> <p>A value is seen as valid if all of the following cases hold:</p> <ul> <li>Value is between 1 and 9 both included.</li> <li>Value is not yet present in the row the cell belongs to. This does not include zeros.   The value zero is allowed multiple times.</li> <li>Value is not yet present in the column the cell belongs to. This does not include zeros.   The value zero is allowed multiple times.</li> <li>Value is not yet present in the 3x3 square the cell is in. This does not include zeros.   The value zero is allowed multiple times.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>coordinate</code> <code>Coordinate</code> <p>Position on the board.</p> required <code>value</code> <code>int</code> <p>Value for position given by <code>coordinate</code>.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if value is valid for <code>coordinate</code> otherwise <code>False</code>.</p>"},{"location":"examples/","title":"Examples","text":"<p>The solver provided by PySuSo expects an instance of <code>pysuso.boards.Board</code>. A <code>Board</code> instance should be created by one of the factory methods.</p>"},{"location":"examples/#the-from_nested_lists-factory-method","title":"The <code>from_nested_lists</code> factory method","text":"<p>To create a board with the the  <code>from_neste_lists</code> factory method requires a list with nine elements, each a list with nine integers between from zero to nine. The following code shows an example:</p> <pre><code>from pysuso.boards import Board\nfrom pysuso.solvers import BasicSolver\n\nboard = Board.from_nested_lists(\n    [\n        [0, 5, 0, 7, 0, 3, 0, 6, 0],\n        [0, 0, 7, 0, 0, 0, 8, 0, 0],\n        [0, 0, 0, 8, 1, 6, 0, 0, 0],\n        [0, 0, 0, 0, 3, 0, 0, 0, 0],\n        [0, 0, 5, 0, 0, 0, 1, 0, 0],\n        [7, 3, 0, 0, 4, 0, 0, 8, 6],\n        [9, 0, 6, 0, 0, 0, 2, 0, 4],\n        [8, 4, 0, 5, 7, 2, 0, 9, 3],\n        [0, 0, 0, 4, 0, 9, 0, 0, 0]\n    ]\n)\nsolver = BasicSolver(board)\nsolution = solver.solve()\nprint(solution)\n# -------------------------------------\n# | 1 | 5 | 8 | 7 | 2 | 3 | 4 | 6 | 9 |\n# -------------------------------------\n# | 3 | 6 | 7 | 9 | 5 | 4 | 8 | 2 | 1 |\n# -------------------------------------\n# | 2 | 9 | 4 | 8 | 1 | 6 | 3 | 7 | 5 |\n# -------------------------------------\n# | 6 | 1 | 9 | 2 | 3 | 8 | 5 | 4 | 7 |\n# -------------------------------------\n# | 4 | 8 | 5 | 6 | 9 | 7 | 1 | 3 | 2 |\n# -------------------------------------\n# | 7 | 3 | 2 | 1 | 4 | 5 | 9 | 8 | 6 |\n# -------------------------------------\n# | 9 | 7 | 6 | 3 | 8 | 1 | 2 | 5 | 4 |\n# -------------------------------------\n# | 8 | 4 | 1 | 5 | 7 | 2 | 6 | 9 | 3 |\n# -------------------------------------\n# | 5 | 2 | 3 | 4 | 6 | 9 | 7 | 1 | 8 |\n# -------------------------------------\n</code></pre>"},{"location":"examples/#the-from_list-factory-method","title":"The <code>from_list</code> factory method","text":"<p>To create a board with the the  <code>from_list</code> factory method requires a list with 81 elements, each an integer between zero to nine. The following code shows an example:</p> <pre><code>from pysuso.boards import Board\nfrom pysuso.solvers import BasicSolver\n\nboard = Board.from_list(\n    [\n        0, 5, 0, 7, 0, 3, 0, 6, 0,\n        0, 0, 7, 0, 0, 0, 8, 0, 0,\n        0, 0, 0, 8, 1, 6, 0, 0, 0,\n        0, 0, 0, 0, 3, 0, 0, 0, 0,\n        0, 0, 5, 0, 0, 0, 1, 0, 0,\n        7, 3, 0, 0, 4, 0, 0, 8, 6,\n        9, 0, 6, 0, 0, 0, 2, 0, 4,\n        8, 4, 0, 5, 7, 2, 0, 9, 3,\n        0, 0, 0, 4, 0, 9, 0, 0, 0\n    ]\n)\nsolver = BasicSolver(board)\nsolution = solver.solve()\nprint(solution)\n# -------------------------------------\n# | 1 | 5 | 8 | 7 | 2 | 3 | 4 | 6 | 9 |\n# -------------------------------------\n# | 3 | 6 | 7 | 9 | 5 | 4 | 8 | 2 | 1 |\n# -------------------------------------\n# | 2 | 9 | 4 | 8 | 1 | 6 | 3 | 7 | 5 |\n# -------------------------------------\n# | 6 | 1 | 9 | 2 | 3 | 8 | 5 | 4 | 7 |\n# -------------------------------------\n# | 4 | 8 | 5 | 6 | 9 | 7 | 1 | 3 | 2 |\n# -------------------------------------\n# | 7 | 3 | 2 | 1 | 4 | 5 | 9 | 8 | 6 |\n# -------------------------------------\n# | 9 | 7 | 6 | 3 | 8 | 1 | 2 | 5 | 4 |\n# -------------------------------------\n# | 8 | 4 | 1 | 5 | 7 | 2 | 6 | 9 | 3 |\n# -------------------------------------\n# | 5 | 2 | 3 | 4 | 6 | 9 | 7 | 1 | 8 |\n# -------------------------------------\n</code></pre>"},{"location":"examples/#the-from_string-factory-method","title":"The <code>from_string</code> factory method","text":"<p>To create a board with the the  <code>from_string</code> factory method requires a string with 81 elements, each an integer between zero to nine. The examples above can be modified as follows:</p> <pre><code>from pysuso.boards import Board\nfrom pysuso.solvers import BasicSolver\n\nboard = Board.from_string((\n    \"050703060\"\n    \"007000800\"\n    \"000816000\"\n    \"000030000\"\n    \"005000100\"\n    \"730040086\"\n    \"906000204\"\n    \"840572093\"\n    \"000409000\"\n))\nsolver = BasicSolver(board)\nsolution = solver.solve()\nprint(solution)\n# -------------------------------------\n# | 1 | 5 | 8 | 7 | 2 | 3 | 4 | 6 | 9 |\n# -------------------------------------\n# | 3 | 6 | 7 | 9 | 5 | 4 | 8 | 2 | 1 |\n# -------------------------------------\n# | 2 | 9 | 4 | 8 | 1 | 6 | 3 | 7 | 5 |\n# -------------------------------------\n# | 6 | 1 | 9 | 2 | 3 | 8 | 5 | 4 | 7 |\n# -------------------------------------\n# | 4 | 8 | 5 | 6 | 9 | 7 | 1 | 3 | 2 |\n# -------------------------------------\n# | 7 | 3 | 2 | 1 | 4 | 5 | 9 | 8 | 6 |\n# -------------------------------------\n# | 9 | 7 | 6 | 3 | 8 | 1 | 2 | 5 | 4 |\n# -------------------------------------\n# | 8 | 4 | 1 | 5 | 7 | 2 | 6 | 9 | 3 |\n# -------------------------------------\n# | 5 | 2 | 3 | 4 | 6 | 9 | 7 | 1 | 8 |\n# -------------------------------------\n</code></pre>"},{"location":"exceptions/","title":"Exceptions","text":"<p>Contains expections specific to PySuSo.</p>"},{"location":"exceptions/#pysuso.exceptions.InvalidBoardError","title":"InvalidBoardError","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised in case the board cannot be created from the provided values.</p>"},{"location":"exceptions/#pysuso.exceptions.InvalidCellValueError","title":"InvalidCellValueError","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised in case a value is not allowed in a cell.</p>"},{"location":"exceptions/#pysuso.exceptions.InvalidIndexError","title":"InvalidIndexError","text":"<p>             Bases: <code>ValueError</code></p> <p>Raised in case an index is not valid.</p>"},{"location":"exceptions/#pysuso.exceptions.BoardNotSolvableException","title":"BoardNotSolvableException","text":"<p>             Bases: <code>BaseException</code></p> <p>Raised in case the board does not have a solution.</p>"},{"location":"license/","title":"Licence","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"solvers/","title":"Solvers","text":"<p>Provides a collection of Sudoku solvers.</p>"},{"location":"solvers/#pysuso.solvers.BasicSolver","title":"BasicSolver","text":"<pre><code>BasicSolver(board: Board)\n</code></pre> <p>A basic Soduko solver using a brute force back tracking algorithm.</p> <p>This solver uses back tracking for the empty cells. Cells are processed left to right, top to bottom. It always picks the next higher valid value. The algorithm stops in case one valid solution is found. There is no check if there is another valid solution.</p> <p>Parameters:</p> Name Type Description Default <code>board</code> <code>Board</code> <p>Board that should be solved.</p> required"},{"location":"solvers/#pysuso.solvers.BasicSolver.solve","title":"solve","text":"<pre><code>solve() -&gt; Board\n</code></pre> <p>Search a valid solution of the board and returns the filled board.</p> <p>Raises:</p> Type Description <code>BoardNotSolvableException</code> <p>If no valid solution for the board is found.</p> <p>Returns:</p> Type Description <code>Board</code> <p>A board filled with a valid solution.</p>"},{"location":"","title":"PySuSo","text":"<p>PySuSo is a library for solving Sudoku puzzels with Python.</p>"},{"location":"#what-does-pysuso-provide","title":"What does PySuSo provide","text":"<p>PySuSo provides a brute force backtracking solver for Sudoku puzzels. In addition to the solver a board representing the Sudoku puzzel is provided.</p>"},{"location":"#installation","title":"Installation","text":"<p>PySuSo is available on PyPi as <code>pysuso</code>. To install with <code>pip</code> run:</p> <pre><code>pip install pysuso\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<p>Create a board using one of the provided methods on the <code>Board</code> class. See the documentation for an overview off all the methods.</p> <pre><code>board = Board.from_list(\n    [\n        0, 5, 0, 7, 0, 3, 0, 6, 0,\n        0, 0, 7, 0, 0, 0, 8, 0, 0,\n        0, 0, 0, 8, 1, 6, 0, 0, 0,\n        0, 0, 0, 0, 3, 0, 0, 0, 0,\n        0, 0, 5, 0, 0, 0, 1, 0, 0,\n        7, 3, 0, 0, 4, 0, 0, 8, 6,\n        9, 0, 6, 0, 0, 0, 2, 0, 4,\n        8, 4, 0, 5, 7, 2, 0, 9, 3,\n        0, 0, 0, 4, 0, 9, 0, 0, 0\n    ]\n)\n</code></pre> <p>Create a solver providing the board:</p> <pre><code>solver = BasicSolver(board)\n</code></pre> <p>Call the <code>solve</code> method to search for a valid solution:</p> <pre><code>solver.solve()\n</code></pre> <p>Full example including imports:</p> <pre><code>from pysuso.boards import Board\nfrom pysuso.solvers import BasicSolver\n\nboard = Board.from_list(\n    [\n        0, 5, 0, 7, 0, 3, 0, 6, 0,\n        0, 0, 7, 0, 0, 0, 8, 0, 0,\n        0, 0, 0, 8, 1, 6, 0, 0, 0,\n        0, 0, 0, 0, 3, 0, 0, 0, 0,\n        0, 0, 5, 0, 0, 0, 1, 0, 0,\n        7, 3, 0, 0, 4, 0, 0, 8, 6,\n        9, 0, 6, 0, 0, 0, 2, 0, 4,\n        8, 4, 0, 5, 7, 2, 0, 9, 3,\n        0, 0, 0, 4, 0, 9, 0, 0, 0\n    ]\n)\nsolver = BasicSolver(board)\nsolution = solver.solve()\nprint(solution)\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Full documentation is available at PySuSo Documentation.</p>"},{"location":"#additional-remarks","title":"Additional remarks","text":"<p>The tests for the solver are based on Sudokus found in the Sudoku Exchange Puzzle Bank.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#v010-2024-03-16","title":"v0.1.0 (2024-03-16)","text":""},{"location":"CHANGELOG/#feature","title":"Feature","text":"<ul> <li>Initial release</li> </ul>"},{"location":"CHANGELOG/#fix","title":"Fix","text":"<ul> <li>None</li> </ul>"},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>Initial documentation</li> </ul>"},{"location":"CHANGELOG/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>None</li> </ul>"}]}